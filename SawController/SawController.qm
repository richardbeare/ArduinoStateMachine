<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.1" links="0">
 <documentation>Simple model template for QP-nano</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Indicator" superclass="qpn::QActive">
   <documentation>An indicator module using 2 LEDs. Different states get indicated by flash
combinations - both on, red on, green on, both off, green on + red flash fast,
green on + red flash slow, red on + green flash fast, red on + green flash slow,
both flash in sync, both flash out of sync</documentation>
   <statechart properties="0x01">
    <initial target="../4">
     <initial_glyph conn="2,2,5,0,16,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="RedOnGreenOff">
     <entry>    // Turn on the LEDs
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_RED, HIGH);
</entry>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="14,44,3,1,26,-30,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,38,22,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RedOnGreenOn">
     <entry>    // Turn on the LEDs
    digitalWrite(LED_GREEN, HIGH);
    digitalWrite(LED_RED, HIGH);
</entry>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="14,61,3,1,28,-49,-6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,52,22,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RedOffGreenOn">
     <entry>    // Turn on the LEDs
    digitalWrite(LED_GREEN, HIGH);
    digitalWrite(LED_RED, LOW);

</entry>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="14,30,3,1,24,-14,-2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,24,22,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RedOffGreenOff">
     <entry>    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_RED, LOW);
</entry>
     <tran trig="GO_TO_A" target="../../3">
      <tran_glyph conn="14,16,3,3,-2,16,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="GO_TO_B" target="../../1">
      <tran_glyph conn="14,14,3,3,-4,32,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="GO_TO_C" target="../../2">
      <tran_glyph conn="14,12,3,3,-6,46,6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="GO_TO_D" target="../../5">
      <tran_glyph conn="14,10,3,3,-10,58,10">
       <action box="0,-2,10,3"/>
      </tran_glyph>
     </tran>
     <tran trig="GO_TO_E" target="../../6">
      <tran_glyph conn="14,18,3,3,42,51,1">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="GO_TO_F" target="../../7">
      <tran_glyph conn="14,19,3,3,70,50,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="GO_TO_G" target="../../8">
      <tran_glyph conn="14,20,3,3,64,19,8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,4,22,18">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RedOffGreenFlash">
     <entry>digitalWrite(LED_RED, LOW);
QActive_armX(&amp;me-&gt;super, 0U,
             BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);

</entry>
     <exit>QActive_disarmX(&amp;me-&gt;super, 0U);
</exit>
     <initial target="../2">
      <initial_glyph conn="28,69,5,1,2,8,-2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="14,71,3,1,31,-61,-9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="onA">
      <entry>digitalWrite(LED_GREEN, HIGH);</entry>
      <tran trig="Q_TIMEOUT" target="../../3">
       <tran_glyph conn="16,77,3,1,-1,4,18,5,-5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="16,73,12,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="offA">
      <entry>digitalWrite(LED_GREEN, LOW);</entry>
      <tran trig="Q_TIMEOUT" target="../../2">
       <tran_glyph conn="16,87,3,1,19,-11,-7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="16,83,12,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="14,65,23,29">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="GreenOffRedFlash">
     <entry>digitalWrite(LED_GREEN, LOW);
QActive_armX(&amp;me-&gt;super, 0U,
             BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);

</entry>
     <exit>QActive_disarmX(&amp;me-&gt;super, 0U);
</exit>
     <initial target="../3">
      <initial_glyph conn="71,69,5,1,2,8,-2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="57,71,3,1,-3,-63,-18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="offB">
      <entry>digitalWrite(LED_RED, LOW);</entry>
      <tran trig="Q_TIMEOUT" target="../../3">
       <tran_glyph conn="59,87,3,1,19,-11,-7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="59,83,12,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="onB">
      <entry>digitalWrite(LED_RED, HIGH);</entry>
      <tran trig="Q_TIMEOUT" target="../../2">
       <tran_glyph conn="59,77,3,1,-1,4,18,5,-5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="59,73,12,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="57,65,23,29">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="GreenRedFlashSync">
     <entry>QActive_armX(&amp;me-&gt;super, 0U,
                 BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);

</entry>
     <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
     <initial target="../3">
      <initial_glyph conn="100,69,5,1,2,8,-2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="86,71,3,1,-5,-54,-45">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="offC">
      <entry>digitalWrite(LED_RED, LOW);
digitalWrite(LED_GREEN, LOW);</entry>
      <tran trig="Q_TIMEOUT" target="../../3">
       <tran_glyph conn="88,87,3,1,19,-11,-7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="88,83,12,6">
       <entry box="1,2,7,1"/>
      </state_glyph>
     </state>
     <state name="onC">
      <entry>digitalWrite(LED_RED, HIGH);
digitalWrite(LED_GREEN, HIGH);</entry>
      <tran trig="Q_TIMEOUT" target="../../2">
       <tran_glyph conn="88,77,3,1,-1,4,18,5,-5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="88,73,12,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="86,65,23,29">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="GreenRedFlashOutofSync">
     <entry>QActive_armX(&amp;me-&gt;super, 0U,
             BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);

</entry>
     <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
     <initial target="../3">
      <initial_glyph conn="100,35,5,1,2,10,-2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="CHANGE_INDICATOR" target="../../4">
      <tran_glyph conn="86,37,3,1,-3,-30,-47">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="offD">
      <entry>digitalWrite(LED_RED, LOW);
digitalWrite(LED_GREEN, HIGH);</entry>
      <tran trig="Q_TIMEOUT" target="../../3">
       <tran_glyph conn="88,55,3,1,19,-11,-7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="88,51,12,6">
       <entry box="1,2,7,1"/>
      </state_glyph>
     </state>
     <state name="onD">
      <entry>digitalWrite(LED_RED, HIGH);
digitalWrite(LED_GREEN, LOW);</entry>
      <tran trig="Q_TIMEOUT" target="../../2">
       <tran_glyph conn="88,45,3,1,-1,4,18,5,-5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="88,41,12,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="86,31,23,29">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="137,97"/>
   </statechart>
  </class>
  <class name="Buttons" superclass="qpn::QActive">
   <documentation>An Button module using 2 buttons. Different signals for simultaneous presses or double taps.</documentation>
   <statechart properties="0x01">
    <initial target="../1">
     <initial_glyph conn="13,22,5,3,12">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="wait">
     <tran trig="BUTTONPRESS_A" target="../2">
      <tran_glyph conn="25,36,3,3,17">
       <action box="1,-3,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTONPRESS_B" target="../3">
      <tran_glyph conn="112,34,1,1,-13">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Afirst">
      <entry>QActive_armX(&amp;me-&gt;super, 0U, BUTTON_PRESS_TOUT, 0U);</entry>
      <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
      <tran trig="Q_TIMEOUT" target="../..">
       <action>// send single press
ButtonASingle();</action>
       <tran_glyph conn="42,53,3,3,-19,-1,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_A" target="../..">
       <action>// send double press
ButtonADouble();</action>
       <tran_glyph conn="42,49,3,3,-19,-1,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_B" target="../..">
       <action>// send dual press
ButtonAB();</action>
       <tran_glyph conn="42,57,3,3,-19,-1,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,30,23,34">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Bfirst">
      <entry>QActive_armX(&amp;me-&gt;super, 0U, BUTTON_PRESS_TOUT, 0U);</entry>
      <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
      <tran trig="Q_TIMEOUT" target="../..">
       <action>// send single press B
ButtonBSingle();
</action>
       <tran_glyph conn="76,38,3,1,36">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_B" target="../..">
       <action>// send double press B
ButtonBDouble();</action>
       <tran_glyph conn="76,42,3,1,36">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_A" target="../..">
       <action>// send dual press
ButtonAB();</action>
       <tran_glyph conn="76,46,3,1,36">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="76,29,23,34">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="25,16,87,72"/>
    </state>
    <state_diagram size="146,104"/>
   </statechart>
  </class>
  <class name="Stage" superclass="qpn::QActive">
   <documentation>The single axis stage</documentation>
   <attribute name="CurrentStep" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="CurrentCut" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>index into the cut array</documentation>
   </attribute>
   <statechart properties="0x01">
    <initial target="../1">
     <initial_glyph conn="7,3,5,3,-5,7,1">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="ReadyWaiting">
     <entry>// set the indicator to both lights on
RedOnGreenOn();
// wait for button press
deactivateStepper();
// for testing only - when stuff doesn't work
// setDirectionHome();
// digitalWrite(TBCLK_P, HIGH);</entry>
     <exit>LightsOff();</exit>
     <tran trig="SINGLEPRESS_A">
      <choice target="../../../6/1">
       <guard brief="Already home">digitalRead(OPTICAL_A)</guard>
       <choice_glyph conn="16,25,5,3,22,-7,4">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../2/1">
       <guard brief="else">else</guard>
       <choice_glyph conn="16,25,4,3,4,57,-7,2">
        <action box="1,3,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="3,14,3,-1,4,11,9">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,6,29,12">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="FindHome">
     <documentation>// drive the stage to the home position, then flash the indicators together
// Stepper speed and direction set on entry</documentation>
     <entry>setDirectionHome();
activateStepper();
setStepperSpeed(&amp;me-&gt;super, BSP_TICKS_PER_SEC/MotorStepDivider);
RedOffGreenFlash();</entry>
     <exit>me-&gt;CurrentStep = 0;
deactivateStepper();
stopStepperSpeedTimer(&amp;me-&gt;super);
LightsOff();</exit>
     <tran trig="OPTICALSTOP_A" target="../../7/1">
      <tran_glyph conn="63,17,3,3,50,2,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="HomeInit">
      <tran trig="Q_TIMEOUT" target="../../2">
       <action>doStepA();</action>
       <tran_glyph conn="75,22,3,3,17">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="75,19,10,6"/>
     </state>
     <state name="HomeInitB">
      <tran trig="Q_TIMEOUT" target="../../1">
       <action>doStepB();</action>
       <tran_glyph conn="92,23,3,1,-5,1,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="92,19,10,6"/>
     </state>
     <state_glyph node="63,5,47,21">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="CutSequence">
     <entry>me-&gt;CurrentCut = 0;
activateStepper();
// Needs to be slower than usual if we're doing serial IO for debugging
setStepperSpeed(&amp;me-&gt;super, BSP_TICKS_PER_SEC/MotorStepDivider);
</entry>
     <exit>deactivateStepper();
stopStepperSpeedTimer(&amp;me-&gt;super);
</exit>
     <tran trig="OPTICALSTOP_A" target="../../4">
      <tran_glyph conn="99,68,1,3,13,1,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="OPTICALSTOP_B" target="../../4">
      <tran_glyph conn="99,70,1,3,13,1,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SINGLEPRESS_A">
      <action>//RedFlashGreenOff();</action>
      <choice target="../../3/0">
       <guard brief="check direction">(me-&gt;CurrentStep) &gt; (cutsteparray[me-&gt;CurrentCut])</guard>
       <action>setDirectionHome();
RedFlashGreenOff();</action>
       <choice_glyph conn="33,42,5,3,12">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../3/0">
       <guard>else</guard>
       <action>setDirectionAway();
RedOffGreenFlash();</action>
       <choice_glyph conn="33,42,4,3,4,12">
        <action box="1,4,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="20,42,3,-1,13">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="SeekSuper">
      <exit>++(me-&gt;CurrentCut);
LightsOff();
</exit>
      <state name="SeekHome">
       <documentation>Move in direction set by incoming link</documentation>
       <entry>BSP_Debug(&quot;Seeking&quot;);</entry>
       <tran trig="Q_TIMEOUT" target="../../1">
        <action>doStepA();
//--(me-&gt;CurrentStep);
me-&gt;CurrentStep += counterAdjust;

#ifdef SERIALDEBUG
Serial.print(me-&gt;CurrentStep);
Serial.print(&quot; &quot;);
Serial.print(me-&gt;CurrentCut);
Serial.print(&quot; &quot;);

Serial.print(cutsteparray[me-&gt;CurrentCut]);
Serial.println(&quot;&quot;);
#endif</action>
        <tran_glyph conn="45,45,3,3,20">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="45,39,15,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="SeekHomeB">
       <tran trig="Q_TIMEOUT">
        <action>doStepB();</action>
        <choice target="../../../0">
         <guard>else</guard>
         <choice_glyph conn="78,43,4,2,12,-26,-7">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard brief="foundcutpos">me-&gt;CurrentStep == cutsteparray[me-&gt;CurrentCut]</guard>
         <choice target="../../../../../../5">
          <guard brief="checkfinished">me-&gt;CurrentCut == (TotalCuts-1)</guard>
          <choice_glyph conn="92,43,5,3,20,9,12">
           <action box="1,0,10,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../../..">
          <guard>else</guard>
          <choice_glyph conn="92,43,4,1,12,7">
           <action box="1,4,10,2"/>
          </choice_glyph>
         </choice>
         <choice_glyph conn="78,43,5,-1,14">
          <action box="2,-3,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="65,43,3,-1,13">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="65,39,11,9"/>
      </state>
      <state_glyph node="40,36,40,39">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="20,32,79,49">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="Error">
     <documentation>Go here if we hit an optical stop from inside the cut sequence.
Flash out of sync</documentation>
     <entry>RedFlashGreenFlashASync();
BSP_Debug(&quot;Error&quot;);</entry>
     <state_glyph node="114,65,16,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="Complete">
     <entry>RedOffGreenFlash();
BSP_Debug(&quot;Complete&quot;);</entry>
     <state_glyph node="124,48,16,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="ClearHome">
     <entry>RedOffGreenFlash();
setDirectionAway();
activateStepper();
setStepperSpeed(&amp;me-&gt;super, BSP_TICKS_PER_SEC/MotorStepDivider);
me-&gt;CurrentStep = 0;</entry>
     <exit>deactivateStepper();
stopStepperSpeedTimer(&amp;me-&gt;super);
</exit>
     <tran trig="OPTICALSTOP_B" target="../../2/1">
      <tran_glyph conn="40,23,3,3,35">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="ShortMove">
      <tran trig="Q_TIMEOUT">
       <action>doStep();
++(me-&gt;CurrentStep);</action>
       <choice target="../../../../2/1">
        <guard brief="far enough">me-&gt;CurrentStep &gt; 200</guard>
        <choice_glyph conn="47,16,4,3,5,28">
         <action box="1,2,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../..">
        <guard>else</guard>
        <choice_glyph conn="47,16,5,1,11">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="42,16,3,-1,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,12,16,11"/>
     </state>
     <state_glyph node="40,6,19,19">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="GoPastHome">
     <documentation>Move past the home position so we can take up all the slack</documentation>
     <entry>setDirectionHome();
activateStepper();
setStepperSpeed(&amp;me-&gt;super, BSP_TICKS_PER_SEC/MotorStepDivider);
RedOnGreenOn();
me-&gt;CurrentStep = 1000; // because it is unsigned</entry>
     <exit>deactivateStepper();
stopStepperSpeedTimer(&amp;me-&gt;super);
LightsOff();</exit>
     <state name="HomeInitD">
      <tran trig="Q_TIMEOUT">
       <action>doStepB();
me-&gt;CurrentStep += counterAdjust;</action>
       <choice target="../../../1">
        <guard>me-&gt;CurrentStep &gt; 900</guard>
        <choice_glyph conn="136,14,4,1,-2,-7,7,-2">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../8/1">
        <guard>else</guard>
        <choice_glyph conn="136,14,5,3,12,5,4">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="132,22,3,-1,0,-8,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="132,18,10,6"/>
     </state>
     <state name="HomeInitC">
      <tran trig="Q_TIMEOUT" target="../../0">
       <action>doStepA();
</action>
       <tran_glyph conn="117,20,3,3,15">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="117,17,10,6"/>
     </state>
     <state_glyph node="115,9,31,15">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="HomeFromLeft">
     <documentation>Move until we leave the optical sensor, travelling right</documentation>
     <entry>setDirectionAway();
activateStepper();
setStepperSpeed(&amp;me-&gt;super, BSP_TICKS_PER_SEC/MotorStepDivider);
RedOffGreenFlash();</entry>
     <exit>deactivateStepper();
stopStepperSpeedTimer(&amp;me-&gt;super);
LightsOff();
me-&gt;CurrentStep = 0;</exit>
     <tran trig="OPTICALSTOP_A2" target="../../9">
      <tran_glyph conn="174,14,1,3,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="HomeInitE">
      <tran trig="Q_TIMEOUT" target="../../2">
       <action>doStepA();
</action>
       <tran_glyph conn="152,19,3,3,11">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="152,16,10,6"/>
     </state>
     <state name="HomeInitF">
      <tran trig="Q_TIMEOUT" target="../../1">
       <action>doStepB();
me-&gt;CurrentStep += counterAdjust;</action>
       <tran_glyph conn="163,20,3,2,0,4,-7,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="163,16,10,6"/>
     </state>
     <state_glyph node="150,10,24,13">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="AtHome">
     <documentation>Flashes both lights in sync.
Sits and waits for a button press to start the cut sequence.
Button A selects the pattern with pins at the ends. Button B selects the inverse.</documentation>
     <entry>RedFlashGreenFlashSync();
</entry>
     <tran trig="SINGLEPRESS_A" target="../../3">
      <action>TotalCuts=TotalCuts1;
cutsteparray=cutsteparray1;
// Green light for the primary pattern
RedOffGreenOn();</action>
      <tran_glyph conn="178,19,3,1,2,19,-81">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SINGLEPRESS_B" target="../../3">
      <action>TotalCuts=TotalCuts2;
cutsteparray=cutsteparray2;
// Red light for inverse
RedOnGreenOff();</action>
      <tran_glyph conn="190,18,1,1,3,21,-14,2,-80">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="178,9,12,16">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="191,85"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="sawcontroller.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API
#include &quot;targetsteps.h&quot;

//============================================================================
// declare all AO classes...
$declare(AOs::Indicator)
$declare(AOs::Buttons)
$declare(AOs::Stage)

//...

#define SERIALDEBUG

// AO instances and event queue buffers for them...
Indicator AO_Indicator;
static QEvt l_indicatorQSto[40]; // Event queue storage for Indicator
Buttons AO_Buttons;
static QEvt l_buttonsQSto[40]; // Event queue storage for Buttons
Stage AO_Stage;
static QEvt l_stageQSto[40]; // Event queue storage for Buttons

//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,         0U                  },
    { (QActive *)&amp;AO_Indicator,  l_indicatorQSto,     Q_DIM(l_indicatorQSto) },
    { (QActive *)&amp;AO_Buttons,    l_buttonsQSto,       Q_DIM(l_buttonsQSto) },
    { (QActive *)&amp;AO_Stage,    l_stageQSto,     Q_DIM(l_stageQSto) }

};

//============================================================================

// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 10000, // number of system clock ticks in one second
    TicksPerISR = 100, // The switches get checked BSP_TICKS_PER_SEC/TicksPerISR
    MotorStepDivider = 400, // used to set the timers for sending step signals
    BUTTON_PRESS_TOUT = BSP_TICKS_PER_SEC/5, // how close together do button presses need to be
    LED_RED = 13,
    LED_GREEN = 12,
    TBEN_P = 9,    // Pin for enable - high disables
    TBCLK_P = 10,  // Pin for step  - pulse steps
    TBCW_P = 11,   // pin for direction - changing this changes direction
    OPTICAL_A = 2, /* blue wire */
    OPTICAL_B = 3, /* blue and white wire */
    BUTTON_A = 4, /* orange and white wire */
    BUTTON_B = 5  /*  brown wire */
};

enum InputSignals {
// first set to do with indicators
CHANGE_INDICATOR_SIG=Q_USER_SIG,
GO_TO_A_SIG,
GO_TO_B_SIG,
GO_TO_C_SIG,
GO_TO_D_SIG,
GO_TO_E_SIG,
GO_TO_F_SIG,
GO_TO_G_SIG,
// optical sensors
OPTICALSTOP_A_SIG,
OPTICALSTOP_B_SIG,
// reverse transitions
OPTICALSTOP_A2_SIG,
OPTICALSTOP_B2_SIG,
// buttons - unprocessed
BUTTONPRESS_A_SIG,
BUTTONPRESS_B_SIG,
// buttons - processed
SINGLEPRESS_A_SIG,
SINGLEPRESS_B_SIG,
DOUBLEPRESS_SIG,
DUALPRESS_SIG

};

// direction indicator. Having a direction variable
// means that we can avoid extra states in the seek blocks
int counterAdjust = 1;

void BSP_Debug(const char * msg)
{
#ifdef SERIALDEBUG
    Serial.println(msg);
#endif
}

void ButtonASingle()
{
BSP_Debug(&quot;single press A&quot;);
QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, SINGLEPRESS_A_SIG, 0U);

}
void ButtonADouble()
{
BSP_Debug(&quot;double press A&quot;);
}
void ButtonBSingle()
{
QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, SINGLEPRESS_B_SIG, 0U);
BSP_Debug(&quot;single press B&quot;);
}
void ButtonBDouble()
{
BSP_Debug(&quot;double press B&quot;);
}
void ButtonAB()
{
BSP_Debug(&quot;simultaneous press AB&quot;);
QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, DUALPRESS_SIG, 0U);
}


// Setting indicator
void LightsOff() {
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, CHANGE_INDICATOR_SIG, 0U);
}

void RedOffGreenOn() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_A_SIG, 0U);
}

void RedOnGreenOff() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_B_SIG, 0U);
}

void RedOnGreenOn() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_C_SIG, 0U);
}

void RedOffGreenFlash() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_D_SIG, 0U);
}

void RedFlashGreenOff() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_E_SIG, 0U);
}

void RedFlashGreenFlashSync() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_F_SIG, 0U);
}

void RedFlashGreenFlashASync() {
LightsOff();
QACTIVE_POST_ISR((QMActive *)&amp;AO_Indicator, GO_TO_G_SIG, 0U);
}

void setDirectionHome(){
  digitalWrite(TBCW_P, HIGH);
  counterAdjust = -1;
}

void setDirectionAway(){
    digitalWrite(TBCW_P, LOW);
    counterAdjust = 1;
}

void activateStepper(){
   digitalWrite(TBEN_P, LOW);
}

void deactivateStepper(){
   digitalWrite(TBEN_P, HIGH);
}


void setStepperSpeed(QActive * who, QTimeEvtCtr Tm) {
   QActive_armX(who, 0U, Tm, Tm);
}
void stopStepperSpeedTimer(QActive * who) {
   QActive_disarmX(who, 0U);
}

void doStep(){
    digitalWrite(TBCLK_P, HIGH);
    digitalWrite(TBCLK_P, LOW);
}

void doStepA(){
    //digitalWrite(TBCLK_P, HIGH);
// https://forum.arduino.cc/index.php?topic=91079.0
    PORTB |= _BV (2); //
    //digitalWrite(TBCLK_P, LOW);
    //PORTB &amp;= ~_BV (2);
}
void doStepB(){
    //digitalWrite(TBCLK_P, LOW);
// https://forum.arduino.cc/index.php?topic=91079.0
   //PORTB |= _BV (2); //
    //digitalWrite(TBCLK_P, LOW);
    PORTB &amp;= ~_BV (2);
}

// Document the indicator states
// Started and waiting - red and green on - this is where it stops before attempting to find the home position. 
// Press a button to seek home
// At home - red and green flashing together

// Button object is sending events to the stage object. stage object sends events to the indicators
// Button events are sent from the procedures above
//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Indicator.super, Q_STATE_CAST(&amp;Indicator_initial));
    QActive_ctor(&amp;AO_Buttons.super, Q_STATE_CAST(&amp;Buttons_initial));
    QActive_ctor(&amp;AO_Stage.super, Q_STATE_CAST(&amp;Stage_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_RED, OUTPUT); // set the LED-L pin to output
    pinMode(LED_GREEN, OUTPUT);
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_RED, LOW);

    //button pins
    pinMode(BUTTON_A, INPUT);
    pinMode(BUTTON_B, INPUT);

    // motor control pins
    pinMode(TBEN_P, OUTPUT);
    pinMode(TBCLK_P, OUTPUT);
    pinMode(TBCW_P, OUTPUT);

#ifdef SERIALDEBUG
    Serial.begin(115200);   // set the highest stanard baud rate of 115200 bps
    Serial.print(F(&quot;Start, QP-nano: &quot;));
    Serial.print(F(QP_VERSION_STR));
    Serial.println(&quot;&quot;);
    Serial.print(&quot;CPU Clock frequency &quot;);
    Serial.println(F_CPU);
#endif
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

     // No need to clear the interrupt source since the Timer2 compare
    // interrupt is automatically cleared in hardware when the ISR runs.

    // optical home needs to fire on a low-&gt;high transition
    // advance could be on either transition.
    // both need to be on transition, otherwise we flood the event queues
    // Might be best to have another, slower ISR for buttons, or only check them every 10th
    // entry to this loop

    static uint8_t interruptCounter = 0;
    // need to sort this out - probably want to arrange for firing on button release
    static uint8_t nOld=0;   /* previous-previous switch bitmask */
    static uint8_t nPrev=0;  /* previous  switch bitmask */
    static uint8_t nOutput=0; /* debounced switch bitmaks */
    static uint8_t pOutput=0;
    ++interruptCounter;
    if (interruptCounter == TicksPerISR) {
       // only check the switches every 10 clock ticks
       interruptCounter = 0;
       // do the low frequency stuff, like button checks

       // read AND debounce all the switches
       /* read the current state of the switches, ignoring
        the serial port pins. all the inputs need to be on
        PORTD (pins 0 to 7) */
        // B00111100 needs to match the input pins defined at the top. i.e we
        // want 2,3,4,5. Leave 0 and 1 alone - they are for serial IO.
        uint8_t nCurrent = PIND &amp; B00111100;
        nOutput = (nOutput &amp; (nOld | nPrev | nCurrent)) |
                             (nOld &amp; nPrev &amp; nCurrent);
        nOld = nPrev;
        nPrev = nCurrent;


        // compare  nOutput and pOutput to get a transition
        // low to high transitions only
        uint8_t LowtoHigh = nOutput &amp; (~pOutput);
        uint8_t HightoLow = pOutput &amp; (~nOutput);
        /* the following relies on the input ports being PIN numbers 0-7 */
        uint8_t opticalA = LowtoHigh &amp; (1 &lt;&lt; OPTICAL_A);
        uint8_t opticalA2 = HightoLow &amp; (1 &lt;&lt; OPTICAL_A);
        uint8_t opticalB = LowtoHigh &amp; (1 &lt;&lt; OPTICAL_B);
        uint8_t opticalB2 = HightoLow &amp; (1 &lt;&lt; OPTICAL_B);

        uint8_t buttonA = LowtoHigh &amp; (1 &lt;&lt; BUTTON_A);
        uint8_t buttonB = LowtoHigh &amp; (1 &lt;&lt; BUTTON_B);
        pOutput=nOutput;

        if (opticalA) {
           BSP_Debug(&quot;Optical A&quot;);
           QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, OPTICALSTOP_A_SIG, 0U);
        }
        if (opticalB) {
           BSP_Debug(&quot;Optical B&quot;);
           QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, OPTICALSTOP_B_SIG, 0U);
        }

        if (opticalA2) {
           BSP_Debug(&quot;Optical A2&quot;);
           QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, OPTICALSTOP_A2_SIG, 0U);
        }
        if (opticalB2) {
           BSP_Debug(&quot;Optical B2&quot;);
           QACTIVE_POST_ISR((QMActive *)&amp;AO_Stage, OPTICALSTOP_B2_SIG, 0U);
        }

        if (buttonA) {
            //BSP_Debug(&quot;Button A&quot;);
            QACTIVE_POST_ISR((QMActive *)&amp;AO_Buttons, BUTTONPRESS_A_SIG, 0U);
        }

        if (buttonB) {
            //BSP_Debug(&quot;Button B&quot;);
            QACTIVE_POST_ISR((QMActive *)&amp;AO_Buttons, BUTTONPRESS_B_SIG, 0U);
        }

   }




}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
//    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
//    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (0U &lt;&lt; CS20); // 1/256
//    TCCR2B = (1U &lt;&lt; CS22 ) | (0U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/128
    TCCR2B = (1U &lt;&lt; CS22 ) | (0U &lt;&lt; CS21) | (0U &lt;&lt; CS20); // 1/64

    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    //    OCR2A  = (F_CPU / 1024U / BSP_TICKS_PER_SEC) - 1U;
    OCR2A  = (F_CPU  / 64 / BSP_TICKS_PER_SEC ) - 1U;

}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Indicator)
$define(AOs::Buttons)
$define(AOs::Stage)
//...
</text>
  </file>
 </directory>
</model>
