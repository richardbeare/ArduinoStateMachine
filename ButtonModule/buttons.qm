<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.0" links="0">
 <documentation>Testing the optical stops, LEDs and button switches on my screw positioning system</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Buttons" superclass="qpn::QActive">
   <documentation>An Button module using 2 buttons. Different signals for simultaneous presses or double taps.</documentation>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="13,22,5,3,13">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="wait">
     <tran trig="BUTTONPRESS_A" target="../2">
      <tran_glyph conn="26,36,3,3,18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTONPRESS_B" target="../3">
      <tran_glyph conn="113,34,1,1,-13">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Afirst">
      <entry>QActive_armX((QActive *)me, 0U, BUTTON_PRESS_TOUT, 0U);</entry>
      <tran trig="Q_TIMEOUT" target="../..">
       <action>// send single press
ButtonASingle();</action>
       <tran_glyph conn="44,52,3,3,-18">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_A" target="../..">
       <action>// send double press
ButtonADouble();</action>
       <tran_glyph conn="44,48,3,3,-18">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_B" target="../..">
       <action>// send dual press
ButtonAB();</action>
       <tran_glyph conn="44,56,3,3,-18">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="44,29,23,34">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="Bfirst">
      <entry>QActive_armX((QActive *)me, 0U, BUTTON_PRESS_TOUT, 0U);</entry>
      <tran trig="Q_TIMEOUT" target="../..">
       <action>// send single press B
ButtonBSingle();
</action>
       <tran_glyph conn="77,38,3,1,36">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_B" target="../..">
       <action>// send double press B
ButtonBDouble();</action>
       <tran_glyph conn="77,42,3,1,36">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTONPRESS_A" target="../..">
       <action>// send dual press
ButtonAB();</action>
       <tran_glyph conn="77,46,3,1,36">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="77,29,23,34">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="26,16,87,72"/>
    </state>
    <state_diagram size="146,104"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="buttons.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

//============================================================================
// declare all AO classes...
$declare(AOs::Buttons)
//...

#define SERIALDEBUG

// AO instances and event queue buffers for them...
Buttons AO_Buttons;
static QEvt l_buttonsQSto[20]; // Event queue storage for Blinky
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                  },
    { (QActive *)&amp;AO_Buttons,  l_buttonsQSto,     Q_DIM(l_buttonsQSto) }
};

//============================================================================

// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 10000, // number of system clock ticks in one second
    TicksPerISR = 100, // The switches get checked BSP_TICKS_PER_SEC/TicksPerISR
    BUTTON_PRESS_TOUT = BSP_TICKS_PER_SEC/5, // how close together do button presses need to be
    LED_RED = 13,
    LED_GREEN = 12,
    OPTICAL_A = 2, /* blue wire */
    OPTICAL_B = 3, /* blue and white wire */
    BUTTON_A = 4, /* orange and white wire */
    BUTTON_B = 5  /*  brown wire */
};

enum InputSignals {
OPTICALSTOP_A_SIG=Q_USER_SIG, 
OPTICALSTOP_B_SIG, 
BUTTONPRESS_A_SIG, 
BUTTONPRESS_B_SIG
};

void BSP_Debug(const char * msg)
{
#ifdef SERIALDEBUG
    Serial.println(msg);
#endif
}

void ButtonASingle()
{
BSP_Debug(&quot;single press A&quot;);
}
void ButtonADouble()
{
BSP_Debug(&quot;double press A&quot;);
}
void ButtonBSingle()
{
BSP_Debug(&quot;single press B&quot;);
}
void ButtonBDouble()
{
BSP_Debug(&quot;double press B&quot;);
}
void ButtonAB()
{
BSP_Debug(&quot;simultaneous press AB&quot;);
}

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Buttons.super, Q_STATE_CAST(&amp;Buttons_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_RED, OUTPUT); // set the LED-L pin to output
    pinMode(LED_GREEN, OUTPUT);

    pinMode(BUTTON_A, INPUT);
    pinMode(BUTTON_B, INPUT);

#ifdef SERIALDEBUG
    Serial.begin(115200);   // set the highest stanard baud rate of 115200 bps
    Serial.print(F(&quot;Start, QP-nano: &quot;));
    Serial.print(F(QP_VERSION_STR));
    Serial.println(&quot;&quot;);
    Serial.print(&quot;CPU Clock frequency &quot;);
    Serial.println(F_CPU);
#endif
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    // No need to clear the interrupt source since the Timer2 compare
    // interrupt is automatically cleard in hardware when the ISR runs.

    // optical home needs to fire on a low-&gt;high transition
    // advance could be on either transition.
    // both need to be on transition, otherwise we flood the event queues
    // Might be best to have another, slower ISR for buttons, or only check them every 10th
    // entry to this loop

    static uint8_t interruptCounter = 0;
    // need to sort this out - probably want to arrange for firing on button release
    static uint8_t nOld=0;   /* previous-previous switch bitmask */
    static uint8_t nPrev=0;  /* previous  switch bitmask */
    static uint8_t nOutput=0; /* debounced switch bitmaks */
    static uint8_t pOutput=0;
    ++interruptCounter;
    if (interruptCounter == TicksPerISR) {
       // only check the switches every 10 clock ticks
       interruptCounter = 0;
       // do the low frequency stuff, like button checks

       // read AND debounce all the switches
       /* read the current state of the switches, ignoring
        the serial port pins. all the inputs need to be on
        PORTD (pins 0 to 7) */
        // B00111100 needs to match the input pins defined at the top. i.e we
        // want 2,3,4,5. Leave 0 and 1 alone - they are for serial IO.
        uint8_t nCurrent = PIND &amp; B00111100;
        nOutput = (nOutput &amp; (nOld | nPrev | nCurrent)) |
                             (nOld &amp; nPrev &amp; nCurrent);
        nOld = nPrev;
        nPrev = nCurrent;


        // compare  nOutput and pOutput to get a transition
        // low to high transitions only
        uint8_t LowtoHigh = nOutput &amp; (~pOutput);
        /* the following relies on the input ports being PIN numbers 0-7 */
        uint8_t opticalA = LowtoHigh &amp; (1 &lt;&lt; OPTICAL_A);
        uint8_t opticalB = LowtoHigh &amp; (1 &lt;&lt; OPTICAL_B);
        uint8_t buttonA = LowtoHigh &amp; (1 &lt;&lt; BUTTON_A);
        uint8_t buttonB = LowtoHigh &amp; (1 &lt;&lt; BUTTON_B);
        pOutput=nOutput;

        if (opticalA) {
           BSP_Debug(&quot;Optical A&quot;);
           //QACTIVE_POST_ISR((QMActive *)&amp;AO_Buttons, OPTICALSTOP_A_SIG, 0U);
        }
        if (opticalB) {
           BSP_Debug(&quot;Optical B&quot;);
           //QACTIVE_POST_ISR((QMActive *)&amp;AO_Buttons, OPTICALSTOP_B_SIG, 0U);
        }

        if (buttonA) {
            //BSP_Debug(&quot;Button A&quot;);
            QACTIVE_POST_ISR((QMActive *)&amp;AO_Buttons, BUTTONPRESS_A_SIG, 0U);
        }

        if (buttonB) {
            //BSP_Debug(&quot;Button B&quot;);
            QACTIVE_POST_ISR((QMActive *)&amp;AO_Buttons, BUTTONPRESS_B_SIG, 0U);
        }

   }


}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
//    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
//    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (0U &lt;&lt; CS20); // 1/256
//    TCCR2B = (1U &lt;&lt; CS22 ) | (0U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/128
    TCCR2B = (1U &lt;&lt; CS22 ) | (0U &lt;&lt; CS21) | (0U &lt;&lt; CS20); // 1/64

    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    //    OCR2A  = (F_CPU / 1024U / BSP_TICKS_PER_SEC) - 1U;
    OCR2A  = (F_CPU  / 64 / BSP_TICKS_PER_SEC ) - 1U;

}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Buttons)
//...
</text>
  </file>
 </directory>
</model>
