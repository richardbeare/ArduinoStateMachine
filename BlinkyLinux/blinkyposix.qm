<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.0" links="0">
 <documentation>Simple Blinky example for QP-nano, which demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, Mac)
- Platform-independent main() function
- make.bat batch file for Windows</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpn::QActive">
   <statechart>
    <initial target="../1">
     <action>/* arm the private time event for tick rate 0
* to expire in 1/2s and periodically every 1/2 second
*/
QActive_armX(&amp;me-&gt;super,
             0U,
             BSP_TICKS_PER_SEC/10U,
             BSP_TICKS_PER_SEC/10U);</action>
     <initial_glyph conn="2,3,5,1,20,4,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,13,3,1,18,6,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,25,3,1,20,-15,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,17,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="30,29"/>
   </statechart>
  </class>
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky * const me = &amp;AO_Blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="blinky.c">
   <text>#include &quot;qpn.h&quot;    /* QP-nano framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::Blinky}

/* the single instance of the Blinky active object -------------------------*/
Blinky AO_Blinky;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::Blinky_ctor}
$define${AOs::Blinky}</text>
  </file>
  <file name="bsp.h">
   <text>/*****************************************************************************
* Product: BSP for the simple Blinky example
* Last updated for version 5.4.0
* Last updated on  2015-05-18
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) Quantum Leaps, www.state-machine.com.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Alternatively, this program may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GNU General Public License and are specifically designed for
* licensees interested in retaining the proprietary status of their code.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
*
* Contact information:
* Web:   www.state-machine.com
* Email: info@state-machine.com
*****************************************************************************/
#ifndef bsp_h
#define bsp_h

#define BSP_TICKS_PER_SEC    100U

void BSP_init(void);
void BSP_ledOff(void);
void BSP_ledOn(void);

#endif /* bsp_h */
</text>
  </file>
  <file name="bsp.c">
   <text>/*****************************************************************************
* Product: BSP for Blinky example, POSIX with cooperative QV kernel
* Last updated for version 5.4.0
* Last updated on  2015-05-24
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) Quantum Leaps, LLC. All rights reserved.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Alternatively, this program may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GNU General Public License and are specifically designed for
* licensees interested in retaining the proprietary status of their code.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
*
* Contact information:
* Web:   www.state-machine.com
* Email: info@state-machine.com
*****************************************************************************/
#include &quot;qpn.h&quot;
#include &quot;bsp.h&quot;
#include &quot;blinky.h&quot;

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt; /* for memcpy() and memset() */
#include &lt;sys/select.h&gt;
#include &lt;termios.h&gt;
#include &lt;unistd.h&gt;

Q_DEFINE_THIS_FILE

/* Local-scope objects -----------------------------------------------------*/
static struct termios l_tsav; /* structure with saved terminal attributes */

/*..........................................................................*/
void BSP_init() {
    printf(&quot;Simple Blinky example\nQP-nano version: %s\n&quot;
           &quot;Press ESC to quit...\n&quot;,
           QP_VERSION_STR);
}
/*..........................................................................*/
void BSP_ledOff() {
    printf(&quot;OFF\n&quot;);
}
/*..........................................................................*/
void BSP_ledOn() {
    printf(&quot;ON\n&quot;);
}
/*..........................................................................*/
void Q_onAssert(char_t const Q_ROM * const file, int_t line) {
    fprintf(stderr, &quot;\nAssertion failed in %s, line %d\n&quot;, file, line);
    exit(-1);
}

/*--------------------------------------------------------------------------*/
void QF_onStartup(void) {
    struct termios tio;  /* modified terminal attributes */

    tcgetattr(0, &amp;l_tsav); /* save the current terminal attributes */
    tcgetattr(0, &amp;tio);    /* obtain the current terminal attributes */
    tio.c_lflag &amp;= ~(ICANON | ECHO); /* disable the canonical mode &amp; echo */
    tcsetattr(0, TCSANOW, &amp;tio); /* set the new attributes */
    QF_setTickRate(BSP_TICKS_PER_SEC);
}
/*..........................................................................*/
void QF_onCleanup(void) {
    /* restore the saved terminal attributes */
    tcsetattr(0, TCSANOW, &amp;l_tsav);
    printf(&quot;\nBye! Bye!\n&quot;);
}
/*..........................................................................*/
void QF_onClockTickISR(void) {
    struct timeval timeout = { 0U, 0U }; /* timeout for select() */
    fd_set con; /* FD set representing the console */

    QF_tickXISR(0U); /* perform the QF-nano clock tick processing */

    FD_ZERO(&amp;con);
    FD_SET(0, &amp;con);
    /* check if a console input is available, returns immediately */
    if (0 != select(1, &amp;con, 0, 0, &amp;timeout)) { /* any descriptor set? */
        char ch;
        read(0, &amp;ch, 1);
        if (ch == '\33') { /* ESC pressed? */
            QF_stop();
        }
    }
}

</text>
  </file>
  <file name="main.c">
   <text>/*****************************************************************************
* Product: &quot;Blinky&quot; example
* Last Updated for Version: 5.8.0
* Date of the Last Update:  2016-11-06
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) Quantum Leaps, LLC. All rights reserved.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Alternatively, this program may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GNU General Public License and are specifically designed for
* licensees interested in retaining the proprietary status of their code.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
*
* Contact information:
* http://www.state-machine.com
* mailto:info@state-machine.com
*****************************************************************************/
#include &quot;qpn.h&quot;     /* QP-nano API */
#include &quot;bsp.h&quot;     /* Board Support Package */
#include &quot;blinky.h&quot;  /* Application interface */

/* Local-scope objects -----------------------------------------------------*/
static QEvt l_blinkyQSto[10]; /* Event queue storage for Blinky */

/* QF_active[] array defines all active object control blocks --------------*/
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                      },
    { (QActive *)&amp;AO_Blinky,  l_blinkyQSto,     Q_DIM(l_blinkyQSto)     }
};

/*..........................................................................*/
int main(void) {
    Blinky_ctor(); /* instantiate all Blinky AO */

    QF_init(Q_DIM(QF_active)); /* initialize the QF-nano framework */
    BSP_init();      /* initialize the Board Support Package */

    return QF_run(); /* transfer control to QF-nano */
}
</text>
  </file>
  <file name="qpn_conf.h">
   <text>#ifndef qpn_conf_h
#define qpn_conf_h

#define Q_PARAM_SIZE            4
#define QF_TIMEEVT_CTR_SIZE     2
#define QF_TIMEEVT_PERIODIC

#endif  /* qpn_conf_h */</text>
  </file>
  <file name="blinky.h">
   <text>/*****************************************************************************
* Product: simple &quot;Blinky&quot; example
* Last updated for version 5.4.0
* Last updated on  2015-05-18
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) Quantum Leaps, www.state-machine.com.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Alternatively, this program may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GNU General Public License and are specifically designed for
* licensees interested in retaining the proprietary status of their code.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
*
* Contact information:
* Web:   www.state-machine.com
* Email: info@state-machine.com
*****************************************************************************/
#ifndef blinky_h
#define blinky_h

enum BlinkySignals {
    DUMMY_SIG = Q_USER_SIG,
    MAX_PUB_SIG,          /* the last published signal */

    /*TIMEOUT_SIG,*/
    MAX_SIG               /* the last signal */
};

void Blinky_ctor(void);

extern struct BlinkyTag AO_Blinky;

#endif /* blinky_h */
</text>
  </file>
 </directory>
</model>
